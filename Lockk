local allowedUsernames = {
    ["CelexOnTOP24"] = true,
    ["Hearty_fijian"] = true,
    ["malookanasser"] = true,
    ["vSheLuvXx"] = true,
}

local function isUserAllowed(username)
    return allowedUsernames[username] ~= nil
end

local toggleKey = Enum.KeyCode.V 
local isEnabled = true
local predictionFactor = 0.15 

local playerService = game:GetService("Players")
local inputService = game:GetService("UserInputService")
local renderService = game:GetService("RunService")
local localPlayer = playerService.LocalPlayer
local mouse = localPlayer:GetMouse()
local camera = workspace.CurrentCamera
local highlight = Instance.new("Highlight")
highlight.FillColor = Color3.fromRGB(255, 0, 0)
highlight.FillTransparency = 0.5
highlight.OutlineTransparency = 1

local currentTarget = nil

-- Function to update currentTarget to a valid player
local function updateCurrentTarget()
    if currentTarget then
        if not currentTarget.Character or not currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            currentTarget = nil
            highlight.Adornee = nil
            highlight.Parent = nil
        end
    end
end

-- Function to find the closest player on screen
local function findClosestPlayer()
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(playerService:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPartPosition = player.Character.HumanoidRootPart.Position
            local screenPosition, onScreen = camera:WorldToScreenPoint(rootPartPosition)
            local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude

            if distance < shortestDistance and onScreen then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Input handling
inputService.InputBegan:Connect(function(input)
    if input.KeyCode == toggleKey and isEnabled then
        if currentTarget then
            highlight.Adornee = nil
            highlight.Parent = nil
            currentTarget = nil
        else
            currentTarget = findClosestPlayer()
            if currentTarget then
                highlight.Adornee = currentTarget.Character
                highlight.Parent = currentTarget.Character
            end
        end
    end
end)

-- Rendering
renderService.RenderStepped:Connect(function()
    updateCurrentTarget() -- Check and update currentTarget

    if currentTarget and currentTarget.Character then
        local rootPart = currentTarget.Character.HumanoidRootPart
        local targetPosition = rootPart.Position
        local targetVelocity = rootPart.Velocity
        local prediction = targetPosition + (targetVelocity * predictionFactor)
        camera.CFrame = CFrame.new(camera.CFrame.Position, prediction)
    end
end)


if isUserAllowed(localPlayer.Name) then
    print("User is authorized to run the script.")
else
    warn("Unauthorized user: " .. localPlayer.Name)
    -- Optionally, disable or restrict script functionality for unauthorized users
    isEnabled = false -- Example of disabling script functionality
end
